{# @var craft \craft\web\twig\variables\CraftVariable #}
{#
/**
 * craft-deploy plugin for Craft CMS 3.x
 *
 * craft-deploy index.twig
 *
 * @author        dilewe
 * @copyright Copyright (c) 2021 dilewe
 * @link            dilewe.de
 * @package     Craftdeploy
 * @since         1.0.0
 */
#}

{% extends "_layouts/cp" %}
{% import "_includes/forms" as forms %}

{% do view.registerAssetBundle("dilewe\\release\\assetbundles\\verffentlichencpsection\\VerffentlichenCPSectionAsset") %}

{# Link for the ? icon at the bottom of the page #}
{% set docsUrl = "https://github.com/dilewe/release/blob/master/README.md" %}

{# The title of this CP section #}
{% set title = "Veröffentlichen" %}

{# The URL to this plugin's base CP section #}
{% set pluginCpUrl = url('craft-deploy') %}

{# Get a URL to an image in our AssetBundle #}
{% set iconUrl = view.getAssetManager().getPublishedUrl('@dilewe/release/assetbundles/verffentlichencpsection/dist', true) ~ '/img/icon.svg' %}

{# Content that should appear in the page header#}
{% set extraPageHeaderHtml %}
	<div class="buttons">
		<a href="{{ pluginCpUrl }}" class="btn submit add icon">{{ "Click Me!"|t('craft-deploy') }}</a>
	</div>
{% endset %}

{# The content of the CP Section#}
{% set content %}

<style>
	:root {
		--dlw-color: #1E3E51;
	}
	.progress {
		width: 99%;
		background-color: grey;
		color: white;
		margin: 20px auto;
	}
	.bar {
		width: 100%;
		height: 30px;
		background-color: grey;
		text-align: center;
		line-height: 30px;
		color: white;
		overflow: hidden;
	}
	.bar::after {
		content: "";
		background-image: url("{{ iconUrl }}");
		background-size: contain;
		width: 30px;
		height: 30px;
	}
	.button {
		display: block;
		margin: 5px;
		border: 1px solid grey;
		border-radius: 50%;
		padding: 5px 10px;
		background-color: var(--dlw-color);
		color: white;
		font-size: 28px;
		width: 200px;
		height: 200px;
		margin-left: auto;
		margin-right: auto;
		cursor: pointer;
	}
	.statusText {
		margin: 5px 0;
	}
	.seperator {
		display: block;
		width: 100%;
		height: 3px;
		border-bottom: 1px solid grey;
		margin: 20px auto;
	}
	status-url,
	status-secret {
		display: block;
		width: 100%;
		margin: 0;
		height: 20px;
	}
	.dev-console {
		display: block;
		width: 100%;
		height: 40px;
	}

</style>


{# <form method="post" accept-charset="UTF-8">
	{{ csrfInput() }}
	<input type="hidden" name="action" value="craft-deploy/deploy/deploy">
	<button class="btn submit" type="submit">{{'Do it'|t('craft-deploy')}}</button>
</form> #}

<status>Status: <span>prüfe...</span></status>
<status-url></status-url>
<status-secret></status-secret>

<p>hier kann die Veröffentlichung gestartet werden:</p>
<button id="deploy" class="button">Ver&shy;öffent&shy;lichen</button>

<div class="progress">
	<div class="bar">warte...</div>
</div>

<span class="statustext"></span>


<script>
const releaseUrl = "{{alias("@releaseUrl")}}";
const releaseSecret = "{{alias("@releaseSecret")}}";
const deployButton = document.getElementById("deploy");
const bar = document.querySelector(".bar");
const progress = document.querySelector(".progress");
const statusSpan = document.querySelector("status span");
const statusTxt = document.querySelector(".statustext");
const statusUrl = document.querySelector("status-url");
const statusSecret = document.querySelector("status-secret");
const failureButton = document.getElementById("failure");
const devConsole = document.querySelector(".dev-console");

const isValidSHA1 = string => {
	if (string.length > 1) {
		return string;
	}
    return false;
};
const isValidUrl = string => {
	let url;
	try {
		url = new URL(string);
	}
	catch (e) {
		devConsole.innerText = e;
		return false;
	}
	if (url.protocol === "https:") {
		return url.href
	}
	devConsole.innerText = `wrong protocol: ${ url.protocol}`;
	return false
};
const setStatus = (status, element) => {
	if (!element) { return; }
	element.innerText = status;
	return;
};

const checkIn = (url, secret) => {
	let check = 0;
	if (isValidUrl(url)) {
		setStatus(isValidUrl(url), statusUrl);
		++check;
	}
	if (isValidSHA1(secret)) {
		setStatus("Secret vorhanden", statusSecret);
		++check;
	}
	if (check === 2) {
		const valid = document.createElement("VALID");
		statusSpan.innerText = "Ok";
		statusSpan.style.color = "green";
		activateButton();
	}
}
const startRelease = () => {
	deployButton.removeEventListener("click",startRelease);
	deployButton.style.backgroundColor = "grey";
	deployButton.style.cursor = "progress";
	bar.style.backgroundColor = "var(--dlw-color)";
	bar.innerText = "Release gestartet";

	statusTxt.innerText = "";
	getWebhook();
};



const getWebhook = async() => {
    const csrfTokenName = "{{ craft.app.config.general.csrfTokenName|e('js') }}";
    const csrfTokenValue = "{{ craft.app.request.csrfToken|e('js') }}";
	const url = "/admin/release/deploy";
	const body = {};
	body[csrfTokenName] = csrfTokenValue;
	const response = await fetch(url, {
		method: 'POST',
		headers: {
        	'Content-Type': 'application/json;charset=utf-8'
        },
		body: JSON.stringify(body)}
	);
	// const data = await response.json();
}

const activateButton = () => {
	deployButton.addEventListener("click", startRelease);
};

checkIn(releaseUrl, releaseSecret);




</script>
{% endset %}
